// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/repositories.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/Genry72/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserser is a mock of Userser interface.
type MockUserser struct {
	ctrl     *gomock.Controller
	recorder *MockUserserMockRecorder
}

// MockUserserMockRecorder is the mock recorder for MockUserser.
type MockUserserMockRecorder struct {
	mock *MockUserser
}

// NewMockUserser creates a new mock instance.
func NewMockUserser(ctrl *gomock.Controller) *MockUserser {
	mock := &MockUserser{ctrl: ctrl}
	mock.recorder = &MockUserserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserser) EXPECT() *MockUserserMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserser) AddUser(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserserMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserser)(nil).AddUser), ctx, user)
}

// GetUserInfo mocks base method.
func (m *MockUserser) GetUserInfo(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserserMockRecorder) GetUserInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserser)(nil).GetUserInfo), ctx, username)
}

// MockOrderer is a mock of Orderer interface.
type MockOrderer struct {
	ctrl     *gomock.Controller
	recorder *MockOrdererMockRecorder
}

// MockOrdererMockRecorder is the mock recorder for MockOrderer.
type MockOrdererMockRecorder struct {
	mock *MockOrderer
}

// NewMockOrderer creates a new mock instance.
func NewMockOrderer(ctrl *gomock.Controller) *MockOrderer {
	mock := &MockOrderer{ctrl: ctrl}
	mock.recorder = &MockOrdererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderer) EXPECT() *MockOrdererMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderer) AddOrder(ctx context.Context, orderID, userID int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, orderID, userID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdererMockRecorder) AddOrder(ctx, orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderer)(nil).AddOrder), ctx, orderID, userID)
}

// GetOrderByID mocks base method.
func (m *MockOrderer) GetOrderByID(ctx context.Context, orderID int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrdererMockRecorder) GetOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderer)(nil).GetOrderByID), ctx, orderID)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderer) GetOrdersByUserID(ctx context.Context, userID int64) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrdererMockRecorder) GetOrdersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderer)(nil).GetOrdersByUserID), ctx, userID)
}

// MockBalancer is a mock of Balancer interface.
type MockBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockBalancerMockRecorder
}

// MockBalancerMockRecorder is the mock recorder for MockBalancer.
type MockBalancerMockRecorder struct {
	mock *MockBalancer
}

// NewMockBalancer creates a new mock instance.
func NewMockBalancer(ctrl *gomock.Controller) *MockBalancer {
	mock := &MockBalancer{ctrl: ctrl}
	mock.recorder = &MockBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalancer) EXPECT() *MockBalancerMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockBalancer) GetUserBalance(ctx context.Context, userID int64) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockBalancerMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockBalancer)(nil).GetUserBalance), ctx, userID)
}

// Withdraw mocks base method.
func (m *MockBalancer) Withdraw(ctx context.Context, withdraw *models.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalancerMockRecorder) Withdraw(ctx, withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalancer)(nil).Withdraw), ctx, withdraw)
}

// Withdrawals mocks base method.
func (m *MockBalancer) Withdrawals(ctx context.Context, userID int64) ([]*models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", ctx, userID)
	ret0, _ := ret[0].([]*models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockBalancerMockRecorder) Withdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockBalancer)(nil).Withdrawals), ctx, userID)
}

// MockAccrualer is a mock of Accrualer interface.
type MockAccrualer struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualerMockRecorder
}

// MockAccrualerMockRecorder is the mock recorder for MockAccrualer.
type MockAccrualerMockRecorder struct {
	mock *MockAccrualer
}

// NewMockAccrualer creates a new mock instance.
func NewMockAccrualer(ctrl *gomock.Controller) *MockAccrualer {
	mock := &MockAccrualer{ctrl: ctrl}
	mock.recorder = &MockAccrualerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualer) EXPECT() *MockAccrualerMockRecorder {
	return m.recorder
}

// GetAccrualInfo mocks base method.
func (m *MockAccrualer) GetAccrualInfo(ctx context.Context, orderIDs []int64) []*models.ResponseAccrual {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccrualInfo", ctx, orderIDs)
	ret0, _ := ret[0].([]*models.ResponseAccrual)
	return ret0
}

// GetAccrualInfo indicates an expected call of GetAccrualInfo.
func (mr *MockAccrualerMockRecorder) GetAccrualInfo(ctx, orderIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccrualInfo", reflect.TypeOf((*MockAccrualer)(nil).GetAccrualInfo), ctx, orderIDs)
}

// GetUnprocessedOrders mocks base method.
func (m *MockAccrualer) GetUnprocessedOrders(ctx context.Context) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedOrders", ctx)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedOrders indicates an expected call of GetUnprocessedOrders.
func (mr *MockAccrualerMockRecorder) GetUnprocessedOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedOrders", reflect.TypeOf((*MockAccrualer)(nil).GetUnprocessedOrders), ctx)
}

// WriteStatus mocks base method.
func (m *MockAccrualer) WriteStatus(ctx context.Context, src []*models.ResponseAccrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStatus", ctx, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStatus indicates an expected call of WriteStatus.
func (mr *MockAccrualerMockRecorder) WriteStatus(ctx, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStatus", reflect.TypeOf((*MockAccrualer)(nil).WriteStatus), ctx, src)
}
