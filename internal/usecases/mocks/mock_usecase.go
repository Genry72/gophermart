// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	models "github.com/Genry72/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserser is a mock of Userser interface.
type MockUserser struct {
	ctrl     *gomock.Controller
	recorder *MockUserserMockRecorder
}

// MockUserserMockRecorder is the mock recorder for MockUserser.
type MockUserserMockRecorder struct {
	mock *MockUserser
}

// NewMockUserser creates a new mock instance.
func NewMockUserser(ctrl *gomock.Controller) *MockUserser {
	mock := &MockUserser{ctrl: ctrl}
	mock.recorder = &MockUserserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserser) EXPECT() *MockUserserMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockUserser) AuthUser(ctx context.Context, username, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockUserserMockRecorder) AuthUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockUserser)(nil).AuthUser), ctx, username, password)
}

// CreateUser mocks base method.
func (m *MockUserser) CreateUser(ctx context.Context, user *models.UserRegister) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserserMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserser)(nil).CreateUser), ctx, user)
}

// MockOrderser is a mock of Orderser interface.
type MockOrderser struct {
	ctrl     *gomock.Controller
	recorder *MockOrderserMockRecorder
}

// MockOrderserMockRecorder is the mock recorder for MockOrderser.
type MockOrderserMockRecorder struct {
	mock *MockOrderser
}

// NewMockOrderser creates a new mock instance.
func NewMockOrderser(ctrl *gomock.Controller) *MockOrderser {
	mock := &MockOrderser{ctrl: ctrl}
	mock.recorder = &MockOrderserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderser) EXPECT() *MockOrderserMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderser) AddOrder(ctx context.Context, orderID, userID int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, orderID, userID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderserMockRecorder) AddOrder(ctx, orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderser)(nil).AddOrder), ctx, orderID, userID)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderser) GetOrdersByUserID(ctx context.Context, userID int64) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderserMockRecorder) GetOrdersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderser)(nil).GetOrdersByUserID), ctx, userID)
}

// MockBalancer is a mock of Balancer interface.
type MockBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockBalancerMockRecorder
}

// MockBalancerMockRecorder is the mock recorder for MockBalancer.
type MockBalancerMockRecorder struct {
	mock *MockBalancer
}

// NewMockBalancer creates a new mock instance.
func NewMockBalancer(ctrl *gomock.Controller) *MockBalancer {
	mock := &MockBalancer{ctrl: ctrl}
	mock.recorder = &MockBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalancer) EXPECT() *MockBalancerMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockBalancer) GetUserBalance(ctx context.Context, userID int64) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockBalancerMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockBalancer)(nil).GetUserBalance), ctx, userID)
}

// Withdraw mocks base method.
func (m *MockBalancer) Withdraw(ctx context.Context, withdraw *models.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalancerMockRecorder) Withdraw(ctx, withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalancer)(nil).Withdraw), ctx, withdraw)
}

// Withdrawals mocks base method.
func (m *MockBalancer) Withdrawals(ctx context.Context, userID int64) ([]*models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", ctx, userID)
	ret0, _ := ret[0].([]*models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockBalancerMockRecorder) Withdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockBalancer)(nil).Withdrawals), ctx, userID)
}
