// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/jwtauth/auth.go

// Package mock_jwtauth is a generated GoMock package.
package mock_jwtauth

import (
	reflect "reflect"

	models "github.com/Genry72/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuther is a mock of Auther interface.
type MockAuther struct {
	ctrl     *gomock.Controller
	recorder *MockAutherMockRecorder
}

// MockAutherMockRecorder is the mock recorder for MockAuther.
type MockAutherMockRecorder struct {
	mock *MockAuther
}

// NewMockAuther creates a new mock instance.
func NewMockAuther(ctrl *gomock.Controller) *MockAuther {
	mock := &MockAuther{ctrl: ctrl}
	mock.recorder = &MockAutherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuther) EXPECT() *MockAutherMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockAuther) GetToken(user *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockAutherMockRecorder) GetToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAuther)(nil).GetToken), user)
}

// ValidateAndParseToken mocks base method.
func (m *MockAuther) ValidateAndParseToken(token string) (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndParseToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateAndParseToken indicates an expected call of ValidateAndParseToken.
func (mr *MockAutherMockRecorder) ValidateAndParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndParseToken", reflect.TypeOf((*MockAuther)(nil).ValidateAndParseToken), token)
}
